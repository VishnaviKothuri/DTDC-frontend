{
  "JIRA-101": {
    "story_line": "As a Developer, I want to write JUnit test case for Reporting-services.",
    "description": "Write Junits using Mockito for all the classes under Service and Controller packages of reporting-services to ensuring 100% code coverage",
    "acceptance_criteria": [
      "100% code coverage test cases",
      "JUnits should be written"
    ],
    "story_points": 5,
    "reference_links": [
      "https://www.geeksforgeeks.org/software-testing/unit-testing-in-spring-boot-project-using-mockito-and-junit/"
    ]
  },
  "JIRA-222": {
    "story_line": "SAy Hello",
    "description": "Say hello.",
    "acceptance_criteria": [
      
    ],
    "story_points": 3,
    "reference_links": []
  },
  "JIRA-122": {
    "story_line": "As a customer, I want to see my recent transactions on my dashboard.",
    "description": "Modify dashboard to show the last 10 transactions for the logged-in user, fetching data from the new transactions API endpoint.",
    "acceptance_criteria": [
      "Dashboard displays a list of recent transactions.",
      "Each transaction shows date, amount, and description.",
      "Only show transactions belonging to the logged-in user."
    ],
    "story_points": 2,
    "reference_links": [
      "https://react-table.tanstack.com/docs/examples/basic",
      "https://docs.spring.io/spring-data/jpa/docs/current/reference/html/"
    ]
  },
"JIRA-121": {
    "story_line": "In the banking-ui application, modify 'Receiver username' label text to 'Receiver UPI' in 'Quick Pay' UI section ",
    "description": "Change the label text from 'Receiver name ' to 'Receiver UPI' \n Add validation to the input field to require '@upi' extension \n Show error message 'Invalid UPI' when validation fails",
    "acceptance_criteria": [
      "Display name of receiver name label under ' Quick Pay' UI should be rendered as 'Receiver UPI'",
      "Input validation logic should be implemented"
    ],
    "story_points": 2
  },
  "JIRA-125": {
    "story_line": "Update make payment logic to deduct '0.5%' as transaction fees on all the transfers",
    "description": "Add transaction fees calculation and deduction functionality to the payment transaction flow. When money is transferred from sender's account to receiver's account, the system should automatically deduct a flat fee of 0.5% from the transaction amount before processing the transfer.",
    "acceptance_criteria": [
      "Calculate 0.5% fee on the original transaction amount before transfer",
      "Deduct the calculated fee from sender's account in addition to the transfer amount",
      "Update transaction records to include fee amount and breakdown",
      "Ensure fee calculation works for all transaction types (Quick Pay, transfers, etc.)"
    ],
    "technical_requirements": [
      "Modify payment service to include fee calculation logic",
      "Update transaction models to store fee information",
      "Add fee display components in frontend forms",
      "Implement fee validation in backend services",
      "Update database schema to track fee transactions"
    ],
    "story_points": 5
  }
}



